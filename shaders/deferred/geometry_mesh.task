#version 450
#extension GL_EXT_mesh_shader : require
#extension GL_KHR_shader_subgroup_ballot : require

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 2) uniform GlobalUniform {
    mat4 model;
    mat4 view;
    mat4 view_proj;
    vec4 frustum_planes[6]; // Frustum planes in view space
    vec3 camera_position;
} global_uniform;

struct s_meshlet {
    uint vertex_offset;
    uint triangle_offset;
    uint vertex_count;
    uint triangle_count;
    vec3 center;
    float radius;
    vec3 cone_axis;
    float cone_cutoff;
    
    vec3 cone_apex;
    uint lod;

    float parentError;
    float clusterError;
	float pdd1;
	float pdd2;

	vec4 parentBoundingSphere;
};

layout(std430, binding = 8) buffer Meshlets {
    s_meshlet meshlets[];
} mbuf;

layout(std430, binding = 7) buffer MeshletCount {
    uint meshlet_count;
};

// layout (binding = 9) buffer UBOOut
// {
// 	uint drawCount;
// } uboOut;

// Task output payload
struct TaskData {
    uint meshletIndices[32];
};

taskPayloadSharedEXT TaskData taskData;

// Cone culling function
// bool coneCull(vec3 center, float radius, vec3 cone_axis, float cone_cutoff, vec3 camera_position) {
//     //return false;
//     vec3 to_center = center - camera_position;
//     float dist = length(to_center);
//     return dot(to_center, cone_axis) >= cone_cutoff * dist + radius;
// }

bool coneCull(vec3 cone_apex, float radius, vec3 cone_axis, float cone_cutoff, vec3 camera_position) {
    //return false;
    return dot(normalize(cone_apex - camera_position), cone_axis) >= cone_cutoff;
}

// Frustum culling function
bool frustumCull(vec3 center_view_space, float radius) {
    //return true;
    for (int i = 0; i < 6; ++i) {
        if (dot(global_uniform.frustum_planes[i], vec4(center_view_space, 1.0)) < -radius) {
            return false;
        }
    }
    return true;
}

// assume a fixed resolution and fov
const float testFOV = 3.14159265359f / 2.0f;
const float cotHalfFov = 1.0f / tan(testFOV / 2.0f);
const float screenHeight = 1080.0f;
const float lodErrorThreshold = 1.0f;

vec4 transformSphere(vec4 sphere, mat4 transform) {
    vec4 hCenter = vec4(sphere.xyz, 1.0f);
    hCenter = transform * hCenter;
    const vec3 center = hCenter.xyz / hCenter.w;
    return vec4(center, length((transform * vec4(sphere.w, 0, 0, 0)).xyz));
}

// project given transformed (ie in view space) sphere to an error value in pixels
// xyz is center of sphere
// w is radius of sphere
float projectErrorToScreen(vec4 transformedSphere) {
    // https://stackoverflow.com/questions/21648630/radius-of-projected-sphere-in-screen-space
    if (isinf(transformedSphere.w)) {
        return transformedSphere.w;
    }
    const float d2 = dot(transformedSphere.xyz, transformedSphere.xyz);
    const float r = transformedSphere.w;
    return screenHeight * cotHalfFov * r / sqrt(d2 - r*r);
}

bool lodCull(s_meshlet meshlet, mat4 modelview) {

    vec4 projectedBounds = vec4(meshlet.center, max(meshlet.clusterError, 10e-10f));
    projectedBounds = transformSphere(projectedBounds, modelview);

    vec4 parentProjectedBounds = vec4(meshlet.parentBoundingSphere.xyz, max(meshlet.parentError, 10e-10f));
    parentProjectedBounds = transformSphere(parentProjectedBounds, modelview);

    const float clusterError = projectErrorToScreen(projectedBounds);
    const float parentError = projectErrorToScreen(parentProjectedBounds);
    const bool render = clusterError <= lodErrorThreshold && parentError > lodErrorThreshold;
    return render;

}

void main()
{
	uint ti = gl_LocalInvocationID.x;
    uint mgi = gl_WorkGroupID.x;
    uint mi = mgi * 32 + ti;

    if (mi >= meshlet_count)
        return;

    s_meshlet meshlet = mbuf.meshlets[mi];
    //if (meshlet.lod != 1)
        //return;

    // Transform bounding sphere to world space
    vec4 world_center = global_uniform.model * vec4(meshlet.center, 1.0);
    float scale = length(global_uniform.model[0]); // Assuming uniform scaling
    float radius = meshlet.radius * scale * 1.1; // Slightly inflate the radius

    // Transform center to view space for frustum culling
    vec3 center_view_space = (global_uniform.view * world_center).xyz;

    // Perform frustum culling
    bool frustum_visible = frustumCull(center_view_space, radius);

    // Perform cone culling
    vec3 cone_axis_world = normalize(mat3(global_uniform.model) * meshlet.cone_axis);
    float cone_cutoff = meshlet.cone_cutoff;

    vec3 cone_apex_world = mat3(global_uniform.model) * meshlet.cone_apex;
    bool cone_cull_result = coneCull(cone_apex_world.xyz, radius, cone_axis_world, cone_cutoff, global_uniform.camera_position);

    //bool cone_cull_result = coneCull(world_center.xyz, radius, cone_axis_world, cone_cutoff, global_uniform.camera_position);

    bool lodCheck = lodCull(meshlet, global_uniform.view * global_uniform.model);
    //bool lodCheck = meshlet.lod == 1;

    // Determine if the meshlet should be rendered
    bool accept = frustum_visible && !cone_cull_result && lodCheck;

    // Use subgroup operations for efficiency
    uvec4 ballot = subgroupBallot(accept);
    uint index = subgroupBallotExclusiveBitCount(ballot);

    if (accept)
        taskData.meshletIndices[index] = mi;

    uint count = subgroupBallotBitCount(ballot);

    // Emit mesh tasks if any meshlets are visible
    if (gl_LocalInvocationID.x == 0 && count > 0) {
      	//atomicAdd(uboOut.drawCount, count);
        EmitMeshTasksEXT(count, 1, 1);
    }
}