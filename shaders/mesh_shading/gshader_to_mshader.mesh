#version 450
#extension GL_EXT_mesh_shader : require

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = 126, max_primitives = 42) out;

layout(set = 0, binding = 2) uniform GlobalUniform {
    mat4 model;
    mat4 view_proj;
    vec3 camera_position;
} global_uniform;

struct s_vertex
{
	vec4 position;
	vec4 normal;
};

layout (std430, binding = 4) buffer _vertices
{
  s_vertex vertices[];
} vb;

struct s_meshlet
{
  uint vertices[64];
  uint indices[126];
  uint vertex_count;
  uint index_count;
};

layout (std430, binding = 3) buffer _meshlets
{
  s_meshlet meshlets[];
} mbuf;

layout (location = 0) out PerVertexData
{
  vec4 color;
} v_out[];

uint find_local_index(uint global_index, uint vertex_count, uint vi_array[64]) {
    for (uint j = 0; j < vertex_count; ++j) {
        if (vi_array[j] == global_index)
            return j;
    }
    // Handle error case if not found
    return 0;
}

void main(void)
{
    uint meshlet_index = gl_WorkGroupID.x;
    uint vertex_count = mbuf.meshlets[meshlet_index].vertex_count;
    uint index_count = mbuf.meshlets[meshlet_index].index_count;
    uint primitive_count = index_count / 3;

    SetMeshOutputsEXT(vertex_count, primitive_count);

    mat4 MVP = global_uniform.view_proj * global_uniform.model;

    // Array to store global vertex indices for mapping
    uint vi_array[64];

    // Output each vertex's position and color
    for (uint i = 0; i < vertex_count; ++i)
    {
        uint vi = mbuf.meshlets[meshlet_index].vertices[i];
        vi_array[i] = vi; // Store for mapping
        gl_MeshVerticesEXT[i].gl_Position = MVP * vb.vertices[vi].position;
        v_out[i].color = vec4(1.0, 1.0, 1.0, 1.0); // Set color to white
    }

    // Set each triangle's vertex indices
    for (uint i = 0; i < primitive_count; ++i)
    {
        uint idx0 = mbuf.meshlets[meshlet_index].indices[i * 3 + 0];
        uint idx1 = mbuf.meshlets[meshlet_index].indices[i * 3 + 1];
        uint idx2 = mbuf.meshlets[meshlet_index].indices[i * 3 + 2];

        uint local_idx0 = find_local_index(idx0, vertex_count, vi_array);
        uint local_idx1 = find_local_index(idx1, vertex_count, vi_array);
        uint local_idx2 = find_local_index(idx2, vertex_count, vi_array);

        gl_PrimitiveTriangleIndicesEXT[i] = uvec3(local_idx0, local_idx1, local_idx2);
    }
}
